package Algorithms;

import java.util.HashMap;
import java.util.Map;

public class Permutation {
    public static void permutationUtil(char s[], int count[], char result[], int level) {
        if(level==result.length)
        {
            print(result);
            return;
        }
        int i;
        for(i=0; i<s.length; i++)
        {
            if(count[i]==0)
            {
                continue;
            }
            result[level]=s[i];
            count[i]--;
            permutationUtil(s, count, result, level+1);
            count[i]++;
        }
        
    }
    public static void permutaion(String s) {
        int i;
        Map<Character, Integer> countMap=new HashMap<>();
        for(i=0; i<s.length(); i++)
        {
            if(countMap.containsKey(s.charAt(i)))
            {
                countMap.put(s.charAt(i), countMap.get(s.charAt(i))+1);
            }else{
                countMap.put(s.charAt(i), 1);
            }
        }
        i=0;
        char s1[]=new char[countMap.size()];
        int count[]=new int[countMap.size()];
        
        for(Map.Entry<Character, Integer> entry : countMap.entrySet())
        {
            s1[i]=entry.getKey();
            count[i]=entry.getValue();
            i++;
        }
        char result[]=new char[s.length()];
        permutationUtil(s1, count, result, 0);
    }

    public static void main(String[] args) {
        permutaion("aas");
//        String sb="6000059999599985999759996599955999459993599925999159990599895998859987599865998559984599835998259981599805997959978599775997659975599745997359972599715997059969599685996759966599655996459963599625996159960599595995859957599565995559954599535995259951599505994959948599475994659945599445994359942599415994059939599385993759936599355993459933599325993159930599295992859927599265992559924599235992259921599205991959918599175991659915599145991359912599115991059909599085990759906599055990459903599025990159900598995989859897598965989559894598935989259891598905988959888598875988659885598845988359882598815988059879598785987759876598755987459873598725987159870598695986859867598665986559864598635986259861598605985959858598575985659855598545985359852598515985059849598485984759846598455984459843598425984159840598395983859837598365983559834598335983259831598305982959828598275982659825598245982359822598215982059819598185981759816598155981459813598125981159810598095980859807598065980559804598035980259801";
//        if(sb.equals("1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511521531541551561571581591601611621631641651661671681691701711721731741751761771781791801811821831841851861871881891901911921931941951961971981992002012022032042052062072082092102112122132142152162172182192202212222232242252262272282292302312322332342352362372382392402412422432442452462472482492502512522532542552562572582592602612622632642652662672682692702712722732742752762772782792802812822832842852862872882892902912922932942952962972982993003013023033043053063073083093103113123133143153163173183193203213223233243253263273283293303313323333343353363373383393403413423433443453463473483493503513523533543553563573583593603613623633643653663673683693"))
//        {
//            System.out.println("true");
//        }else{
//            System.out.println("false");
//        }
    }

    private static void print(char[] result) {
        int i;
        for(i=0; i<result.length; i++)
        {
            System.out.print(""+result[i]);
        }
        System.out.println();
    }
}
